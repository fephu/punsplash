// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id    String  @id @default(cuid())
  name  String?
  email String? @unique

  username String? @unique
  isHired  Boolean @default(false)

  bio         String? @db.Text
  insUsername String?
  xUsername   String?
  location    String?
  portfolio   String?

  image      String?
  accounts   Account[]
  sessions   Session[]
  Photo      Photo[]
  Collection Collection[]
  LikedPhoto LikedPhoto[]
}

model Photo {
  id           String   @id @default(cuid())
  url          String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  width        Int?
  height       Int?
  aspect_ratio Float?
  description  String?

  photographer_username   String?
  photographer_first_name String?
  photographer_last_name  String?
  exif_camera_make        String?
  exif_camera_model       String?
  exif_iso                Float?
  exif_aperture_value     Float?
  exif_focal_length       Float?
  exif_exposure_time      String?
  photo_location_country  String?
  photo_location_city     String?
  statViews               Int     @default(0)
  statDownload            Int     @default(0)

  User   User?   @relation(fields: [userId], references: [id])
  userId String?

  PhotoFeature    PhotoFeature[]
  LikePhoto       LikedPhoto[]
  PhotoCollection PhotoCollection[]
  Keyword         Keyword[]
}

model Keyword {
  photoId String
  keyword String @db.Text

  suggestedByUser Boolean
  Photo           Photo   @relation(fields: [photoId], references: [id])

  @@id([photoId, keyword])
}

model Feature {
  id       String  @id @default(cuid())
  name     String
  value    String
  imageUrl String?
  subtitle String?

  PhotoFeature PhotoFeature[]
}

model PhotoFeature {
  photoId   String
  featureId String
  Feature   Feature @relation(fields: [featureId], references: [id])
  Photo     Photo   @relation(fields: [photoId], references: [id])

  @@id([photoId, featureId])
}

model Collection {
  id        String  @id @default(cuid())
  title     String
  subtitle  String?
  isPrivate Boolean @default(false)
  userId    String

  User User @relation(fields: [userId], references: [id])

  PhotoCollection PhotoCollection[]
}

model PhotoCollection {
  photoId      String
  collectionId String

  Photo      Photo      @relation(fields: [photoId], references: [id])
  Collection Collection @relation(fields: [collectionId], references: [id])

  @@id([photoId, collectionId])
}

model LikedPhoto {
  photoId String
  userId  String
  Photo   Photo  @relation(fields: [photoId], references: [id])
  User    User   @relation(fields: [userId], references: [id])

  @@id([photoId, userId])
}
